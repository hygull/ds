Before sorting : [12 -3 34 0 56]
After sorting  : [-3 0 12 34 56]
Before sorting : [111 12 67 98 -15]
After sorting  : [-15 12 67 98 111]
Before sorting : [34 -43 12 454 0 56 23]
After sorting  : [-43 0 12 23 34 56 454]
Before sorting : [29 23 0 12 50 -12 100]
After sorting  : [-12 0 12 23 29 50 100]
Before sorting : [12 -32 122 10 -2 1]
After sorting  : [-32 -2 1 10 12 122]
Before sorting : [12.07 -34.87 87.234 123.99 32]
After sorting  : [-34.87 12.07 32 87.234 123.99]
Before sorting : [1 3.3 6 7 9.5]
After sorting  : [1 3.3 6 7 9.5]
Before sorting : []
After sorting  : []
Before sorting : []
After sorting  : []
24
Record  ==>  map[string]interface {}  ==>  map[Data4:Rishikesh Data0:24 Data1:45.56 Data2:true Data3:[2 5 6 7 8 2 1]]
Next  ==>  *ds.Node  ==>  <nil>
{
	"Record": {
		"Data0": 24,
		"Data1": 45.56,
		"Data2": true,
		"Data3": [
			2,
			5,
			6,
			7,
			8,
			2,
			1
		],
		"Data4": "Rishikesh"
	},
	"Next": null
}
[2 5 6 7 8 2 1]
Record  ==>  map[string]interface {}  ==>  map[Data2:[Bangalore Delhi Raipur] Data0:[78.98 65.43 653.76] Data1:[2 5 6 7 8 2 1]]
Next  ==>  *ds.Node  ==>  <nil>
{
	"Record": {
		"Data0": [
			78.98,
			65.43,
			653.76
		],
		"Data1": [
			2,
			5,
			6,
			7,
			8,
			2,
			1
		],
		"Data2": [
			"Bangalore",
			"Delhi",
			"Raipur"
		]
	},
	"Next": null
}
[34 89 21 11 98 43 24 1 -43 67 -2 -23]
[-23 -2 67 -43 1 24 43 98 11 21 89 34]

[14 11 98 -43 24 91 -43 679 -25 -23]
[-23 -25 679 -43 91 24 -43 98 11 14]

[0 34 89 21 67 11 98 -2 -23]
[-23 -2 98 11 67 21 89 34 0]

[354 89 21 111 98 43 243 1 -463 67 -2 -243]
[-243 -2 67 -463 1 243 43 98 111 21 89 354]

[0 34 849 219 11 98 43 24 1 -43 67 -2 -283]
[-283 -2 67 -43 1 24 43 98 11 219 849 34 0]

[Delhi Raipur Bangalore Jaipur Kondagaon Newyork America China]
[China America Newyork Kondagaon Jaipur Bangalore Raipur Delhi]

[]
[]

[0 34.2 8.3 219 11.9 98.4 4.3 24 1 -43.8 6.7 -2 -28.3]
[-28.3 -2 6.7 -43.8 1 24 4.3 98.4 11.9 219 8.3 34.2 0]

Rishikesh Agrawani
inawargA hsekihsiR
[34 89 21 11 98 43 24 1]
[1 24 43 98 11 21 89 34]

[14 11 98 67 24 91]
[91 24 67 98 11 14]

[0 34 89 21 67 11 98 45]
[45 98 11 67 21 89 34 0]

[354 89 21 111 98 43 243 1]
[1 243 43 98 111 21 89 354]

[0 34 849 219 11 98 43 24 1 3]
[0 34 849 219 11 98 43 24 1 3]

[true false true false true true true]
[true true true false true false true]

[(4+6i) (-3+8i) (-6-4i) (12-45i) (12+0i) (0+8i) (-23+0i) (0-34i) (78.9+6i) (23+7.9i) (0-23.7i)]
[(0-23.7i) (23+7.9i) (78.9+6i) (0-34i) (-23+0i) (0+8i) (12+0i) (12-45i) (-6-4i) (-3+8i) (4+6i)]

24
Record  ==>  map[string]interface {}  ==>  map[Data0:24 Data1:45.56 Data2:true Data3:[2 5 6 7 8 2 1] Data4:Rishikesh]
Next  ==>  *ds.Node  ==>  <nil>

[2 5 6 7 8 2 1]
Record  ==>  map[string]interface {}  ==>  map[Data0:[78.98 65.43 653.76] Data1:[2 5 6 7 8 2 1] Data2:[Bangalore Delhi Raipur]]
Next  ==>  *ds.Node  ==>  <nil>

--------------------- Record at Node1 -----------------------------
{
	"Data0": 24,
	"Data1": 45.56,
	"Data2": true,
	"Data3": [
		2,
		5,
		6,
		7,
		8,
		2,
		1
	],
	"Data4": "Gopher"
}

--------------------- Record at Node2 -----------------------------
{
	"Data0": [
		78.98,
		65.43,
		653.76
	],
	"Data1": [
		2,
		5,
		6,
		7,
		8,
		2,
		1
	],
	"Data2": [
		"Bangalore",
		"Delhi",
		"Raipur"
	]
}

--------------------- Record at Node3 -----------------------------
{
	"Data0": "Tell me about Golang",
	"Data1": [
		45.3,
		76.54,
		34.21,
		9.87
	],
	"Data2": 76.45,
	"Data3": 67,
	"Data4": 65,
	"Data5": [
		18,
		9,
		19,
		8,
		9
	]
}


{
	"Record": {
		"Data0": 24,
		"Data1": 45.56,
		"Data2": true,
		"Data3": [
			2,
			5,
			6,
			7,
			8,
			2,
			1
		],
		"Data4": "Gopher"
	},
	"Next": {
		"Record": {
			"Data0": [
				78.98,
				65.43,
				653.76
			],
			"Data1": [
				2,
				5,
				6,
				7,
				8,
				2,
				1
			],
			"Data2": [
				"Bangalore",
				"Delhi",
				"Raipur"
			]
		},
		"Next": {
			"Record": {
				"Data0": "Tell me about Golang",
				"Data1": [
					45.3,
					76.54,
					34.21,
					9.87
				],
				"Data2": 76.45,
				"Data3": 67,
				"Data4": 65,
				"Data5": [
					18,
					9,
					19,
					8,
					9
				]
			},
			"Next": null
		}
	}
}
TypeOf(89) int
TypeOf(int32(13)) int32
TypeOf(int64(239)) int64
TypeOf(float32(5.6)) float32
TypeOf(34.56) float64
TypeOf(Person{"Rishikesh",24,"Programming"}) ds.Person
PASS
ok  	ds	0.009s
